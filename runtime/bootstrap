#!/var/lang/bin/php
<?php declare(strict_types=1);

use Laminas\Diactoros\Request;
use Psr\Http\Message\ResponseInterface;
use Swoole\Coroutine as Co;

require_once __DIR__ . '/vendor/autoload.php';

const NEXT_INVOCATION = '/2018-06-01/runtime/invocation/next';
const INVOCATION_RESPONSE = "/2018-06-01/runtime/invocation/%s/response";

$handler = getenv('_HANDLER') ?: 'index';
$task_root = getenv('LAMBDA_TASK_ROOT') ?: '/var/task';
$runtime_api_url = getenv('AWS_LAMBDA_RUNTIME_API') ?: 'http://localhost:9000';

$runtime_api_scheme = parse_url($runtime_api_url, PHP_URL_SCHEME);
$runtime_api_host = parse_url($runtime_api_url, PHP_URL_HOST);
$runtime_api_port = parse_url($runtime_api_url, PHP_URL_PORT);

$runtime_api = new Co\Http\Client($runtime_api_host, $runtime_api_port, ssl: $runtime_api_scheme === 'https');

require_once "$task_root/$handler.php";

Co\run(static function() use ($runtime_api): void {
    while (true) {
        $runtime_api->get(NEXT_INVOCATION);
        $invocation_id = $runtime_api->headers['Lambda-Runtime-Aws-Request-Id'];

        $request = new Request('/', 'POST', $runtime_api->getBody() ?? '', $runtime_api->getHeaders() ?? []);
        /** @var ResponseInterface $response */
        $response = main($request);

        $runtime_api->post(sprintf(INVOCATION_RESPONSE, $invocation_id), json_encode([
            'statusCode' => $response->getStatusCode(),
            'headers' => $response->getHeaders(),
            'body' => $response->getBody(),
        ], JSON_THROW_ON_ERROR));
    }
});
